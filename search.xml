<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>大模型应用平台</title>
    <url>/2025/02/21/ai-res/</url>
    <content><![CDATA[<p>……</p>
<span id="more"></span>

<h1 id="基于网页的问答平台"><a href="#基于网页的问答平台" class="headerlink" title="基于网页的问答平台"></a>基于网页的问答平台</h1><ol>
<li><p><strong>阿里千问</strong> <a href="https://chat.qwenlm.ai/">链接</a>，支持Qwen等模型，支持Artifacts、Web Search、Image Generation、Video Generation等功能。</p>
</li>
<li><p><strong>阿里通义</strong> <a href="https://tongyi.aliyun.com/">链接</a>，支持Qwen等模型，支持代码模式、深度搜索、PPT创作、指令中心等功能。</p>
</li>
<li><p><strong>腾讯元宝</strong> <a href="https://yuanbao.tencent.com/">链接</a>，支持Hunyuan、DeepSeek等模型，支持深度思考、联网搜索等功能。</p>
</li>
<li><p><strong>华为小艺</strong> <a href="https://xiaoyi.huawei.com/chat/">链接</a>，支持DeepSeek等模型，支持深度思考等功能。</p>
</li>
<li><p><strong>知乎直答</strong> <a href="https://zhida.zhihu.com/">链接</a>，支持DeepSeek等模型，支持深度思考等功能，可以有效搜索知乎内容！！！</p>
</li>
<li><p><strong>火山方舟</strong> <a href="https://www.volcengine.com/experience/ark">链接</a>，支持DeepSeek等模型，支持深度思考、联网搜索等功能。</p>
</li>
<li><p><strong>DeepSeek官方</strong> <a href="https://chat.deepseek.com/">链接</a>，支持DeepSeek等模型，支持深度思考、联网搜索等功能，目前使用人数较多，经常遇到“服务器繁忙，请稍后再试。”的情况。</p>
</li>
<li><p><strong>阶跃星辰跃问</strong> <a href="https://yuewen.cn/chats">链接</a>，支持Step-2、DeepSeek等模型，支持深度思考、联网搜索等功能。</p>
</li>
</ol>
<p>GPT、Claude、Gemini、Grok等模型与应用平台不再列举。</p>
<h1 id="云平台"><a href="#云平台" class="headerlink" title="云平台"></a>云平台</h1><ol>
<li><p><strong>阿里云百炼</strong> <a href="https://www.aliyun.com/product/bailian#/home">链接</a>，支持Qwen、DeepSeek等模型的API、部署、训练和开发。</p>
</li>
<li><p><strong>华为ModelArts</strong> <a href="https://www.huaweicloud.com/product/modelarts/studio.html">链接</a>，支持Qwen、DeepSeek等模型的API、部署、训练和开发。</p>
</li>
<li><p><strong>腾讯混元</strong> <a href="https://cloud.tencent.com/product/hunyuan">链接</a>，支持Hunyuan等模型的接入，可以使用混元生图生成图片。</p>
</li>
<li><p><strong>腾讯云TI平台</strong> <a href="https://cloud.tencent.com/product/ti">链接</a>，支持Hunyuan、DeepSeek等模型的API、部署、训练和开发。</p>
</li>
<li><p><strong>Gitee AI平台</strong> <a href="https://ai.gitee.com/">链接</a>，支持Qwen、DeepSeek等模型的API、微调等功能，同时类似Hugging Face提供了一些模型和数据集。</p>
</li>
<li><p><strong>有道智云</strong> <a href="https://ai.youdao.com/">链接</a>，提供支持翻译功能的API，支持DeepSeek等模型。</p>
</li>
<li><p><strong>火山方舟</strong> <a href="https://www.volcengine.com/product/ark">链接</a>，支持Doubao、DeepSeek等模型的API、应用、训练和精调，支持Prompt生成、调优和管理。</p>
</li>
</ol>
<h1 id="IDE和Extensions"><a href="#IDE和Extensions" class="headerlink" title="IDE和Extensions"></a>IDE和Extensions</h1><ol>
<li><p><strong>Cursor</strong> <a href="https://www.cursor.com/">链接</a>，AI code IDE，支持大部分模型，支持自定义模型。</p>
</li>
<li><p><strong>Cline</strong> <a href="https://github.com/cline/cline">链接</a>，AI code插件，支持大部分模型，支持自定义模型，可以自动进行代码读取、编辑、修改和编译等。我使用claude-3-5-sonnet测试修改了259行代码，花费0.8美元，开销较大。</p>
</li>
<li><p><strong>Continue</strong> <a href="https://github.com/continuedev/continue">链接</a>，AI code插件，支持大部分模型。</p>
</li>
<li><p><strong>Trae</strong> <a href="https://www.trae.ai/">链接</a>，AI code IDE，字节跳动发布的，支持claude等模型。</p>
</li>
<li><p><strong>Marscode</strong> <a href="https://www.marscode.cn/">链接</a>，AI code IDE和插件，支持Doubao等模型。</p>
</li>
<li><p><strong>通义灵码</strong> <a href="https://lingma.aliyun.com/">链接</a>，AI code插件，阿里发布的，支持Qwen等模型。</p>
</li>
<li><p><strong>Github Copilot</strong> <a href="https://github.com/features/copilot">链接</a>，AI code插件，支持一部分模型，每月订阅价10美元，可以补全，可以chat，用起来不错。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>LLM</category>
      </categories>
      <tags>
        <tag>LLM</tag>
      </tags>
  </entry>
  <entry>
    <title>FlacIO论文浅读</title>
    <url>/2025/02/26/flacio/</url>
    <content><![CDATA[<p>……</p>
<span id="more"></span>

<p>FlacIO<a href="#FlacIO">[1]</a>是存储顶会FAST25的论文，研究方向是容器镜像加速。因为我最近在做一些云计算和虚拟化相关的研究工作，所以对这篇论文很感兴趣。这里记录一下我对这篇论文的理解、总结和思考。因本人水平有限，如有错误，欢迎指正。</p>
<h1 id="背景和相关知识"><a href="#背景和相关知识" class="headerlink" title="背景和相关知识"></a>背景和相关知识</h1><h2 id="容器镜像加速"><a href="#容器镜像加速" class="headerlink" title="容器镜像加速"></a>容器镜像加速</h2><p>容器使用较为广泛。容器镜像（container image）的存储栈，通常由远程镜像仓库（remote registry）负责镜像的存储与管理，以及主机节点上的存储驱动（storage driver）用于拉取（pull）镜像并挂载根文件系统（root file system）。</p>
<p>一个容器镜像由底部的多个只读层（read-only layer）和顶部的一个可写层（writable layer）构成。Storage driver一般使用OverlayFS来堆叠镜像文件，同时管理根文件系统。</p>
<p>容器冷启动（Cold startup）时需要从远程仓库拉取image并在主机节点上启动容器。容器启动时往往只需要使用镜像中的一小部分数据，因此full image loading会有较长的容器启动延迟，同时网络带宽利用率也较低。目前有两种优化方法。</p>
<p>首先是Cold Startup Acceleration，主流的优化方法是使用lazy loading来加速容器启动。Lazy loading先加载好镜像metadata，然后再按需加载（on-demand）容器启动时需要的镜像数据，需要哪块就pull &amp; load哪块。</p>
<p>比较知名且使用广泛的有CRFS<a href="#CRFS">[2]</a>和DADI<a href="#DADI">[3]</a>。CRFS基于FUSE（Filesystem in Userspace），是文件系统层的镜像加速方法，同时提供了stargz的镜像格式。DADI基于TCMU（iSCSI block device in Userspace），是块层的镜像加速方法，也提供了zfile镜像格式。</p>
<p>Lazy loading进行容器启动时，会频繁地触发I/O操作，并且阻塞镜像服务。现有的lazy loading方法使用预取（prefetching）来减轻这个过程的影响。</p>
<p>CRFS允许用户在镜像创建过程中将文件按照优先级排列以进行预取。DADI可以通过定制的虚拟块设备（virtual block device）记录块I/O trace，然后在容器启动时根据这些trace预取数据。</p>
<p>其次是Cold Startup Mitigation，例如Caching/Sharing，主要是hot/idel containers共享；例如定制和优化fork机制，基于其他进程快速启动容器；例如P2P Loading，从相邻的peer快速拉取镜像数据。</p>
<h2 id="Lazy-Loading"><a href="#Lazy-Loading" class="headerlink" title="Lazy Loading"></a>Lazy Loading</h2><p>下图展示了file-level和block-level lazy loading系统：</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250304161527259.png"></p>
<p>File-level lazy loading系统通常基于OverlayFS，其堆叠（stack）在本地文件系统之上，有四层：lower layer是镜像只读层和目录；upper layer是对只读层的修改；work layer短暂存储文件系统操作的中间状态；merge layer整合upper layer和lower layer，为容器提供文件系统的unified view。</p>
<p>容器对根文件系统的访问操作都被OverlayFS重定向到本地的文件系统。Page miss时，本地文件系统通知lazy loading module从registry上拉取镜像数据。</p>
<p>为了减少拉取开销，使用cache来预取和缓存将要使用的page。Block-level lazy loading系统的overlay特性和prefetch cache是基于block layer的。</p>
<p>Container cold startup分为三个阶段：</p>
<ol>
<li><p>Deploy阶段。从registry获得容器运行所需的数据和元数据。</p>
</li>
<li><p>Running阶段。主机创建容器runtime。</p>
</li>
<li><p>Ready阶段。主机启动容器并执行entrypoint。</p>
</li>
</ol>
<p>下面作者通过实验展示容器冷启动开销，启动Pytorch容器，然后使用<code>import torch</code>作为entrypoint。主机和registry分别在两个节点上，并通过TCP/IP网络连接。以下是测试结果：</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250304180406256.png"></p>
<p>主要有两个重要的实验观察：</p>
<ol>
<li><p>现有的lazy loading方案减少了Deploy阶段的延迟，但它们在Ready阶段的开销较高。这是因为lazy loading将I/O操作推迟到容器执行阶段，其核心收益在于大幅减少需要加载的数据，因此在冷启动时，对比full image loading减少了80%的延迟。FlacIO在确保其他阶段开销不变的情况下，进一步减少Ready阶段的开销。</p>
</li>
<li><p>I/O放大和网络访问是容器冷启动的主要性能瓶颈。Lazy loading的I/O放大依然较多，首先是因为这些系统大多是以file和chunk的粒度来loading镜像数据的，且容器启动时镜像数据的空间局部性不高；其次这些系统在Ready阶段有大量的远程数据随机访问，网络资源的利用率不高。I/O放大也会浪费网络带宽。</p>
</li>
</ol>
<p>但是这些开销和放大不容易解决，更小的按需加载粒度减少了I/O放大，但会有更多的网络包，增加了网络负载。</p>
<p>预取显然是一个可以解决I/O放大的方法，但是现有的预取方法没有高效地聚合I/O，预取也并不准确。</p>
<p>读到这里大致可以感觉到作者想对prefetch方法进行优化，可能是提出一个更有效的prefetch方法。</p>
<h1 id="动机和挑战"><a href="#动机和挑战" class="headerlink" title="动机和挑战"></a>动机和挑战</h1><p>传统的image abstraction是Global Oriented，即拥有运行镜像的所有文件和命名空间。但是每个container仅使用完整文件数据的一小部分，并且不同服务的containers使用的部分也不相同。</p>
<p>其次image abstraction是Storage Oriented，即记录了根文件系统的磁盘布局，因此，lazy loading需要从registry中获取数据，并在被容器使用之前重建本地内存状态（memory state）。</p>
<p>Image abstraction在容器冷启动时会有四个问题：</p>
<ol>
<li><p>I/O难以聚合，因为在容器启动过程中所需的数据是离散地分布在不同镜像文件中的不同位置。</p>
</li>
<li><p>I/O放大难以消除，因为镜像数据通常是压缩存储的，难以按page粒度进行索引。</p>
</li>
<li><p>很难在不同服务的容器之间优化I/O locality。</p>
</li>
<li><p>目前的Lazy loading需要复杂的I/O转发来加载数据，并构建根文件系统的内存状态。</p>
</li>
</ol>
<p>基于这些问题，FlacIO想要使得image abstraction是Memory Oriented，也就是需要记录容器的内存状态。然后还要是Service Oriented，一类服务需要一个镜像（服务容器的内存状态）。</p>
<p>因此FlacIO预先构建容器服务的根文件系统的内存状态（称为Runtime Image，RI）。RI有两个优点：</p>
<ol>
<li><p>首先，它只包含启动容器所需的最小数据集，并且有利于I/O聚合。</p>
</li>
<li><p>其次，它可以支持快速的根文件系统构建，因为它包含一个完整的内存状态。同时RT可以基于lazy loading系统，为根文件系统的构建提供一条快速路径。</p>
</li>
</ol>
<p>那之后就有两个挑战：</p>
<ol>
<li><p>首先是RT的组织形式。RT必须准确记录冷启动所需的最小元数据和数据集；而且必须紧凑，以免给后端镜像存储带来沉重负担；同时必须能够平滑/无障碍地嵌入主流容器运行时（例如Containerd），并且对上层系统和用户透明。</p>
</li>
<li><p>其次，RT对主机I/O栈的影响。当前内核不支持直接加载容器根文件系统的内存状态，需要新的操作系统原语和缓存机制；此外RT应该基于lazy loading，新的I/O栈需要与传统的on-demand loading I/O堆栈兼容。</p>
</li>
</ol>
<p><strong>个人思考</strong>：FlacIO对当前lazy loading系统在容器冷启动场景下的缺陷进行了深入分析，尤其是针对I/O放大和网络带宽利用率低等问题的剖析十分透彻。通过对其动机和挑战的阐述，可以清晰地认识到，确实需要一种能够记录容器启动时内存状态的解决方案来应对这些瓶颈。然而，如果这种方案需要依赖内核修改来实现，可能会带来一系列潜在问题，包括对系统性能的影响、稳定性的风险，以及在生产环境中的部署复杂度增加等。这些问题无疑会对方案的实际落地和推广构成不小的挑战。</p>
<h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><p>以下是FlacIO的架构图：</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250304235950838.png"></p>
<p>主要包括四个组件：</p>
<ol>
<li><p>FlacIO Driver，运行在container runtime里，主要是进行一些控制平面的操作。</p>
</li>
<li><p>I/O Tracker，运行在VFS（Virtual File System）里，在容器运行时记录I/O操作。</p>
</li>
<li><p>Runtime Page Cache（RTPC），基于OverlayFS实现，提供新的操作系统原语，允许容器使用RT有效地构建根文件系统。</p>
</li>
<li><p>Runtime Image Service，部署在registry里和FlacIO driver配合进行镜像管理。</p>
</li>
</ol>
<p>工作流程是这样的：</p>
<ol>
<li><p>用户为container service创建RT时，FlacIO driver通过传统的lazy loading方法启动容器，并记录其I/O行为，直到满足RT创建条件。</p>
</li>
<li><p>然后，将I/O日志发送给registry，以offline的方式生成相应的RT。</p>
</li>
<li><p>在容器的冷启动过程中，FlacIO driver检查目标RT是否在registry中。如果不存在，则使用传统的lazy loading方法启动容器。</p>
</li>
<li><p>如果目标RT存在，FlacIO driver通过incremental loading将其拉取到宿主机上，然后注入到RTPC中。容器就可以开始启动了。</p>
</li>
</ol>
<h2 id="Runtime-Image"><a href="#Runtime-Image" class="headerlink" title="Runtime Image"></a>Runtime Image</h2><p>RT主要有两个关键设计：准确收集容器的I/O行为的probe-based tracing机制；能够提高网络传输效率、减少存储开销以及和当前容器生态系统兼容的RT结构。</p>
<h3 id="Probe-based-Tracing"><a href="#Probe-based-Tracing" class="headerlink" title="Probe-based Tracing"></a>Probe-based Tracing</h3><p>该设计的核心原则是当probe捕获到相应的事件时停止I/O tracing。</p>
<p>Probes分为external probes和internal probes。External probes检测容器外部的容器状态，比如网口状态检测。</p>
<p>Internal probes在容器中运行，是一个entrypoint。在I/O tracing期间，FlacIO使用internal probes来运行容器。用户在创建RT时需要指定probes的类型和内容。</p>
<p>与DADI中的static tracing机制（手动设置持续时间）相比，基于probe的方法可以更准确、更灵活地收集容器启动所需的I/O。</p>
<p>File-level tracing可以适配不同的container平台。由于文件系统对I/O进行了reorchestration，block-level和容器I/O请求可能会有一定的差异。</p>
<p>I/O tracker基于eBPF设计，FlacIO在file read和page fault的入口处添加了eBPF probes，确保I/O请求被准确且完整地收集。</p>
<p>I/O tracker会生成I/O trace，其中包含多个triples，每个triple记录了I/O的文件路径、偏移量和大小。I/O traces之后被发送到registry，并异步地生成RT。</p>
<h3 id="RT组织和管理"><a href="#RT组织和管理" class="headerlink" title="RT组织和管理"></a>RT组织和管理</h3><p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250305005645347.png"></p>
<p>Group Metadata：一个base image可能对应多个services，相同base images生成的RT组合起来形成一个group，然后有一些元数据信息。</p>
<p>Service Metadata：每个RT包含它自己的元数据信息。</p>
<p>Group Data Zone：存放RT数据的连续存储空间，重删一个group内的pages。</p>
<p>RT生成是从Group Metadata开始，知道相应的page填入Group Data Zone。删除是从Group Data Zone开始，然后再删除相关元数据。</p>
<h2 id="Runtime-Page-Cache"><a href="#Runtime-Page-Cache" class="headerlink" title="Runtime Page Cache"></a>Runtime Page Cache</h2><p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250305010716526.png"></p>
<p>RTPC基本是和RT的结构对应的，将RT载入RTPC的过程基本上和传统page cache miss的过程差不多。</p>
<p>首先，使用rt_diff比较registry的service metadata和RTPC中的bitmap，找到没有载入RTPC的pages；然后从registry拉取，使用rt_inject载入RTPC。</p>
<p>RTPC通过hook OverlayFS的相应文件接口来实现，并且是一个只读的kernel cache，负责处理RT中文件和页面的open/read/mmap操作。对于不属于RT的文件和页面的访问，则由原始的VFS进程处理。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>RTPC和FlacIO driver是基于OverlayFS和Containerd实现的。</p>
<p>对主机内核的修改：I/O tracker是通过在容器启动（read、mmap和page fault）的I/O路径中添加eBPF probes来实现的。RTPC是在OverlayFS中实现的，通过sysfs为用户空间公开了rt_diff和rt_inject原语。此外，OverlayFS的部分文件操作被重定向到RTPC。</p>
<p>下面是FlacIO的流程，简单来说是在Deploy和Running阶段直接载入RT快速建立根文件系统。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250305012259721.png"></p>
<h1 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h1><p>FlacIO的冷启动延迟比其他系统更低，热启动延迟差别不大。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250305012601598.png"></p>
<p>Performace Breakdown显示FlacIO大幅减少了image loading的时间，同时I/O栈的开销也比较小。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250305012747127.png"></p>
<p>FlacIO的设计组件分析，展示出RTPC对性能的改进最大。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250305013015446.png"></p>
<p>FlacIO的RT有一些存储开销，不超过18%。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250305013146257.png"></p>
<p>文件访问性能基本没有变化。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250305013247261.png"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>FlacIO追踪并记录容器启动时的I/O，然后在registry上将其转化为RT存储。当容器再次启动时，这些数据会被拉取并加载到 RTPC 中，从而加速启动过程。</p>
<p>FlacIO 对现有的 lazy loading 系统进行了全面分析，精准定位了其性能瓶颈，因此我在背景和动机部分做了较为详细的记录。相比之下，FlacIO 的设计思路和核心理念并不令人意外，所以对其设计细节仅做了简要概述。不过，FlacIO 的设计点非常清晰且全面，几乎涵盖了一个完整系统所需的全部细节。FlacIO 基于 openEuler 开发，未来可能会开源。</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a name="FlacIO"></a><br>[1] <a href="https://www.usenix.org/conference/fast25/presentation/liu-yubo">FlacIO: Flat and Collective I/O for Container Image Service</a>.<br><a name="CRFS"></a><br>[2] <a href="https://github.com/google/crfs">Google CRFS</a>.<br><a name="DADI"></a><br>[3] <a href="https://www.usenix.org/conference/atc20/presentation/li-huiba">DADI block-level image service for agile and elastic application deployment</a>.</p>
]]></content>
      <categories>
        <category>Paper</category>
      </categories>
      <tags>
        <tag>Container</tag>
        <tag>Paper</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Overleaf中使用latexdiff</title>
    <url>/2025/03/15/latexdiff/</url>
    <content><![CDATA[<p>……</p>
<span id="more"></span>

<p>latexdiff可视化地显示两个文件（版本）之间的显著差异。我想通过在overleaf中使用latexdiff，输出两个不同的PDF文件，一个PDF文件只显示原文，另外一个PDF文件显示两个版本之间的差异。</p>
<p>目前在main文件夹下，有main.tex（当前版本）和main-old.tex（旧版本）文件，同时包含old，figs子文件夹，如下图所示。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250315152425325.png"></p>
<p>main.tex中通过$\input{1-Abstract}$等命令将当前版本的文件包括进来，当前版本的1-Abstract.tex等文件放在main&#x2F;中。</p>
<p>main-old.tex中通过$\input{old&#x2F;1-Abstract}$等命令将旧版本的文件包括进来，旧版本的1-Abstract.tex等文件放在main&#x2F;old&#x2F;中。</p>
<p>有两种方法可以用来生成“差异可视化PDF文件”。</p>
<h1 id="latexmkrc"><a href="#latexmkrc" class="headerlink" title="latexmkrc"></a>latexmkrc</h1><p>第一种方法是使用latexmkrc，即在main&#x2F;下面创建一个latexmkrc文件，并将下列内容放进去：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$pdflatex = &quot;latexdiff main-old.tex main.tex --flatten &gt; main-d.tex; pdflatex %O  main-d&quot;</span><br></pre></td></tr></table></figure>

<p>其中$–flatten$参数将$\input$展开。此时不管是编译main.tex还是main-old.tex文件，都能得到“差异可视化PDF文件”。</p>
<p>如果想得到原文件，则要将latexmkrc文件里面的命令注释掉：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># $pdflatex = &quot;latexdiff main-old.tex main.tex --flatten &gt; main-d.tex; pdflatex %O  main-d&quot;</span><br></pre></td></tr></table></figure>

<p>这时编译main.tex得到的是当前版本的PDF文件，编译main-old.tex得到的是旧版本的PDF文件。</p>
<p>这种方法不方便的地方在于需要手动注释&#x2F;消除注释掉latexmkrc中的命令。</p>
<h1 id="diff-tex"><a href="#diff-tex" class="headerlink" title="diff.tex"></a>diff.tex</h1><p>第二种方法是使用一个单独的diff.tex文件（放在main&#x2F;下），并将下列内容放进去：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\RequirePackage&#123;shellesc&#125;</span><br><span class="line">\ShellEscape&#123;latexdiff main-old.tex main.tex --flatten &gt; main-d.tex&#125;</span><br><span class="line">\input&#123;main-d&#125;</span><br></pre></td></tr></table></figure>

<p>此时编译main.tex得到的是当前版本的PDF文件，编译diff.tex得到的是“差异可视化PDF文件”，不需要手动注释&#x2F;消除注释。</p>
<p>下图为“差异可视化PDF文件”的某部分，其中红色是旧版本中的内容，蓝色是当前版本的内容。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250315152707712.png"></p>
]]></content>
      <tags>
        <tag>latex</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo和Github Pages搭建博客</title>
    <url>/2025/02/19/hexo-install/</url>
    <content><![CDATA[<p>……</p>
<span id="more"></span>

<h1 id="Hexo安装和配置"><a href="#Hexo安装和配置" class="headerlink" title="Hexo安装和配置"></a>Hexo安装和配置</h1><p>首先安装nodejs</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://deb.nodesource.com/setup_20.x | <span class="built_in">sudo</span> bash -</span><br><span class="line"><span class="built_in">sudo</span> apt-get install -y nodejs</span><br></pre></td></tr></table></figure>

<p>安装hexo：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装hexo</span></span><br><span class="line"><span class="built_in">sudo</span> npm install -g hexo</span><br></pre></td></tr></table></figure>

<h2 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h2><p>建立一个文件夹，然后初始化hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> hexo-site &amp;&amp; <span class="built_in">cd</span> hexo-site</span><br><span class="line">hexo init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装相关插件</span></span><br><span class="line"><span class="built_in">sudo</span> npm install hexo-word-counter hexo-blog-encrypt hexo-filter-mathjax hexo-deployer-git hexo-generator-searchdb hexo-leancloud-counter-security --save</span><br><span class="line"><span class="comment"># sudo npm install --save</span></span><br><span class="line"></span><br><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo server -p 23817</span><br></pre></td></tr></table></figure>

<p>可以修改<code>_config.yml</code>文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/xxxx/xxxx.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>

<p>然后部署到github</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>可以更换主题，例如<a href="https://github.com/next-theme/hexo-theme-next"><code>hexo-theme-next</code></a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在hexo-site目录下</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>更改<code>hexo-site/_config.yml</code>文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>

<p>然后重新生成和部署</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<h2 id="增加菜单栏"><a href="#增加菜单栏" class="headerlink" title="增加菜单栏"></a>增加菜单栏</h2><p>可以继续更改<code>hexo-site/themes/next/_config.yml</code>文件，增加菜单栏</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>

<p>然后需要生成相关page</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;tags&quot;</span></span><br><span class="line">hexo new page <span class="string">&quot;categories&quot;</span></span><br><span class="line">hexo new page <span class="string">&quot;archives&quot;</span></span><br><span class="line">hexo new page <span class="string">&quot;about&quot;</span></span><br></pre></td></tr></table></figure>

<p>在相应的<code>hexo-site/source/tags/index.md</code>文件中添加</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2025-02-19 19:17:35</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<h2 id="增加文章"><a href="#增加文章" class="headerlink" title="增加文章"></a>增加文章</h2><p>也可以生成post</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;Hello World&quot;</span></span><br></pre></td></tr></table></figure>
<p>并在<code>hexo-site/source/_posts/</code>目录下编辑相关文件。</p>
<h2 id="主页显示摘要"><a href="#主页显示摘要" class="headerlink" title="主页显示摘要"></a>主页显示摘要</h2><p>文章在主页显示摘要，修改<code>hexo-site/themes/next/_config.yml</code>文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Use `description` in front-matter to specify post excerpt.</span></span><br><span class="line"><span class="attr">excerpt_description:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Read more button</span></span><br><span class="line"><span class="comment"># If true, the read more button will be displayed in excerpt section.</span></span><br><span class="line"><span class="attr">read_more_btn:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>并在文章中使用<code>&lt;!-- more --&gt;</code>来分割文章。</p>
<h2 id="字数和阅读时间统计"><a href="#字数和阅读时间统计" class="headerlink" title="字数和阅读时间统计"></a>字数和阅读时间统计</h2><p>增加文章字数和阅读时间统计，修改<code>hexo-site/themes/next/_config.yml</code>文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需要安装hexo-word-counter</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h2 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h2><p>文章加密，修改<code>hexo-site/themes/next/_config.yml</code>文件，可以查看这篇文章<a href="https://www.itfanr.cc/2021/04/16/hexo-blog-article-encryption/">hexo-blog-encrypt</a>。</p>
<h2 id="其他相关配置"><a href="#其他相关配置" class="headerlink" title="其他相关配置"></a>其他相关配置</h2><p>可以继续更改<code>hexo-site/_config.yml</code>文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改title</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span></span><br><span class="line"><span class="comment"># 修改language</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="comment"># 修改url</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://example.com</span></span><br></pre></td></tr></table></figure>

<p>可以继续参考这篇文章<a href="https://theme-next.js.org/docs/getting-started/">hexo next配置</a>和这篇文章<a href="https://blog.rexking6.top/2021/07/10/hexo%E5%8D%87%E7%BA%A7/">blog.rexking6</a>，修改<code>hexo-site/themes/next/_config.yml</code>文件相关配置。</p>
<p>其中增加数学公式支持，修改<code>hexo-site/themes/next/_config.yml</code>文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需要安装hexo-filter-mathjax</span></span><br><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: none | ams | all</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">ams</span></span><br></pre></td></tr></table></figure>

<h2 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h2><p>可以使用阿里云OSS和<a href="https://github.com/Molunerfinn/PicGo">PicGO</a>搭建图床。</p>
<p>以下是图床图片测试<br><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250220133221268.png" alt="cat gen by AI"></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记-史记（一）</title>
    <url>/2025/02/23/shiji-1/</url>
    <content><![CDATA[<p>一篇读罢头飞雪，但记得斑斑点点，几行陈迹。</p>
<span id="more"></span>
<p>去年我陆续读完了《史记》中的五帝、夏、殷、周、秦五个本纪，后来因为工作和学业繁忙，中间暂停了两个月，转而去读些轻松的通识类书籍。最近重新翻出《史记》，决定再重头读起。</p>
<p>开始认真读历史，一方面是随着年龄增长，对古今人事多了些切身感受；另一方面是发现读史能让人跳出眼前琐事的局限。李白那句”今人不见古时月，今月曾经照古人”特别打动我，千年前的月光依然照着今人，那些曾经鲜活的生命却已化作史书里的三两行墨迹。这种时空的交错感，让我更想从历史中寻找生命的参照。</p>
<p>手头在读两个版本的《史记》：</p>
<ol>
<li>中华书局《全本全注全译史记》（韩兆琦译注，以下简称韩版）</li>
<li>华中科技大学出版社《全译全注史记》（张大可译注，以下简称张版）</li>
</ol>
<p>其中韩版有三家注，即索引、集解和正义。我的读书笔记主要记录两个版本有意思的内容，偶尔记些阅读时的零散思考。毕竟不是专业研究者，难免会有理解偏差，如果发现错误还请多多指正。</p>
<h1 id="本纪"><a href="#本纪" class="headerlink" title="本纪"></a>本纪</h1><p>我先从《史记》的“本纪”部分读起。所谓“本纪”，是《史记》五种体例中的第一部分，共十二篇。简单来说，每篇本纪都是围绕一位帝王，记录当时国家大事的纲要。</p>
<p>其中，《五帝本纪》是第一篇，由太史公司马迁根据《尚书·尧典》等资料撰写而成。我之前也读过《尚书》里比较有名的几篇，感觉《尚书》的文字确实有些佶屈聱牙，晦涩难懂，不太容易理解。</p>
<h1 id="黄帝"><a href="#黄帝" class="headerlink" title="黄帝"></a>黄帝</h1><p>《五帝本纪》开篇介绍黄帝，说他生而神异，打小就聪明、思维敏捷、反应快，几个月就会说活，三五岁就表现出思维敏捷，少年时代非常勤勉，成年以后识辨力很强。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250302005314913.png" alt="黄帝1"></p>
<p>接下来，是黄帝成长为天下共主的过程。他打败了一些不服从他的诸侯，包括炎帝和蚩尤。黄帝在阪泉之野与炎帝作战，在涿鹿之野与蚩尤作战，最终取代了神农氏，成为天下的领袖。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250302010312514.png" alt="黄帝1"></p>
<p>下图是炎帝活动路线图（来源：张版），炎帝从今陕西地区迁移到今河北张家口，并在张家口与黄帝发生了战斗。有一种说法是炎帝和黄帝一起迁徙，黄帝去了今山西和河北，而炎帝则去了今河南一带。另外，阪泉位于河北涿鹿东南，涿鹿故城则在河北怀来南。这些地方我都还没去过，有机会一定要去看看。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250302010826400.png"></p>
<p>再来看看黄帝的活动路线，如下图所示（来源：张版），他的活动范围相当广泛。其中荤粥（xūn yù）是古代北部地区的民族名，也作猃狁（xiǎn yǔn），后来演变成了我们熟知的“匈奴”。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250302011855438.png"></p>
<p>关于黄帝的家庭，他去世后被安葬在桥山，位于今陕西黄陵县。黄帝的孙子高阳，也就是帝颛顼，继承了他的帝位。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250302012504200.png"></p>
<p>以上就是《史记》中关于华夏始祖黄帝的记载。</p>
<p>接下来，是帝颛顼治理国家的事迹。帝颛顼之后，帝位传给了帝喾（kù）。帝颛顼是黄帝的孙子，而帝喾则是黄帝的曾孙，同时也是帝颛顼的堂侄。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250302013146804.png"></p>
<h1 id="帝尧"><a href="#帝尧" class="headerlink" title="帝尧"></a>帝尧</h1><p>帝喾之后继位的是帝尧，他来自陶唐氏，姓祁，因此也被称为唐尧。这里有一段有趣的注释提到，帝喾的四个妃子都有着显赫的背景，她们的后代都成为了天下的主宰。比如，后稷是周朝的祖先，契是商朝的祖先，放勋就是帝尧本人，而帝挚则是帝尧的哥哥。由于帝挚执政时能力较弱，去世后由帝尧继位。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250302013646099.png"></p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250302013947896.png"></p>
<p>接下来，是比较熟悉的帝尧。他以其仁德和智慧著称，在治理国家时非常注重遵循自然规律，特别是日月星辰的运行。他向百姓公布了历法，让大家清楚地知道什么时候该播种，什么时候该收获，帮助人民更好地安排农事活动。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250302133746773.png"></p>
<p>尧开始考虑继承人的问题，他觉得自己的儿子丹朱不适合，于是推荐了共工。共工是负责治水的官员，但尧认为共工喜欢夸夸其谈，做事不靠谱且态度傲慢。当时正逢大洪水时期，有观点认为这是由于上古时代自然界的大变动导致的，许多国家和民族都有类似的洪水神话。尧询问大家谁能治理好洪水，众人推荐了鲧（gǔn），也就是后来大禹的父亲。然而，尧觉得鲧经常不服从命令，还伤害同僚，因此不放心让他负责治水。但大家认为其他人更不合适，还是建议让鲧试试。于是尧同意了，结果鲧治水九年，却毫无成效。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250302134357041.png"></p>
<p>从这些事可以看出，尧在识人方面确实很有眼光。他对儿子和大臣们都有清晰的认识，能够准确判断每个人适合做什么，不适合做什么。这无疑是一个优秀领导者必备的素质。</p>
<p>关于大禹治水的故事，我小时候就常听人讲起。鲧治水失败后，他的儿子大禹接过了这个重任。大禹提出了“堵不如疏”的理念，通过疏通河道来治理水患。他全心投入治水工作，有“三过家门而不入”的事迹。</p>
<p>尧向四岳询问是否有人能接替他的帝位，四岳表示自己的德行不够，不敢承担如此重任。于是，大家推荐了虞舜。他们提到，虞舜的父亲不讲德义，母亲不讲忠信，弟弟也狂傲无礼。然而，尽管身处这样的家庭环境，虞舜依然非常孝顺父母，友爱兄弟，以温厚善良的态度与他们相处。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250302135718674.png"></p>
<p>接着，尧开始考验舜，他把自己的两个女儿娥皇和女英嫁给了舜。注释里提到，统治者之间的联姻，往往通过儿女的婚姻来实现政治目的，这种行为通常不考虑“伦理”或“人性”。舜让这两位出身高贵的女子去妫汭照顾自己的父母，而她们都能够恪守妇道，尽心尽力地履行妻子和儿媳的责任。</p>
<p>尧继续考验舜，发现舜办理什么事都能取得成效。尧觉得舜可以代替他了，舜推辞说德行不够，不得已接受了尧的禅让。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250302141834867.png"><br><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250302141858484.png"></p>
<p>尧采纳了讙兜推荐的共工，然而共工却表现得荒淫邪恶。后来，四方诸侯推荐鲧来治理洪水，但鲧治水九年仍未成功。紧接着，三苗又发动叛乱。于是，舜决定采取行动，将共工流放到幽陵（可能位于今天的密云），希望他能改变北狄的风俗；将讙兜流放到崇山（具体位置不详，一说在交广之间），让他去影响南蛮的风俗；将三苗迁移到三危（今甘肃敦煌），期望他们能改变西戎的风俗；最后，将鲧发配到羽山，让他去改变东夷的风俗。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250302143050871.png"></p>
<p>舜为尧臣二十年，尧才开始让舜“摄政”，自己则退居幕后。又过了二十八年，尧去世了。有说法称尧活到了一百一十六岁。考古发现的陶寺文化遗存与夏朝之前的尧、舜禅让传说相吻合，因此可以认为陶寺文化是陶唐氏集团留下的遗迹，而陶寺墓地则是这个集团首领的贵族墓地。在今山西临汾西南四公里处有一座尧庙，是晋朝时修建的；而在临汾东北三十五公里的郭村西侧，则有尧陵，与尧庙相距约四十公里。这些地方我都还没去过。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250302144039598.png"></p>
<p>尧知道自己的儿子不成器，“交给舜可使天下人得利而只对丹朱一人不利；交给丹朱则对天下人不利而只对丹朱一人有利。尧说怎么也不能让天下人受害而让一个人得利，于是便毅然地将天下交给了舜。” 这一段有注释说是太史公增加的内容。通过这一情节，太史公强调了尧作为圣君的高尚品德和深明大义，还突出了他对于理想社会政治的向往。这种以天下苍生为重、不计个人私利的理念，是太史公心目中理想的君主形象和政治模式的体现。</p>
<p>《竹书纪年》中的记载与《史记》中的描述大相径庭。它提到“尧德衰，为舜所囚”，以及“舜囚尧，复偃塞丹朱，使不得与父相见”，甚至有“舜放尧于平阳”的说法。这些记载暗示了一种权力斗争的场景，与太史公所宣扬的和平禅让形成了鲜明对比。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250302145121140.png"></p>
<p>在尧去世后，舜为尧守丧三年，之后他选择避让到黄河以南，表面上是为了将权力归还给丹朱。一些注释说，舜的这种行为可能并非完全出于自愿或礼节，而是考虑到当时复杂的政治局势和潜在的权力斗争风险。在古代权力交接的过程中，喧宾夺主往往伴随着不可预测的危险，因此舜的避让可能是一种谨慎的政治策略。</p>
<p>至于《竹书纪年》中提到的“舜囚尧”或“禹囚舜”等情节，虽然与传统儒家叙事相悖，但从权力斗争的角度来看，并非完全不可能。在历史的关键时刻，权力的争夺和更迭往往伴随着激烈的斗争，所谓的“箭在弦上不得不发”是对这种局势的生动描述。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250302145441719.png"></p>
<p>我觉得，“箭在弦上不得不发”这一比喻确实深刻揭示了政治斗争中权力人物所面临的复杂局面和巨大压力。一旦一个人被推到权力的风口浪尖，他的每一个决定都不再仅仅是个人意志的体现，而是受到多方面因素的制约和影响。</p>
<p>帝王的伟力在于集众，但是这种集众之力也意味着帝王在某种程度上受制于他所依赖的群体。他的决策需要考虑各方利益，包括家人、亲信、大臣以及更广泛的社会阶层。一旦他试图退出或改变方向，可能会面临来自这些群体的巨大阻力。</p>
<p>对于舜来说，他的家人和亲信可能已经将自己的利益与舜的权力紧密绑定在一起。如果舜选择退让，这些人的利益可能会受到严重威胁，因此他们会极力反对舜的退让行为。并且在权力斗争中，政治对手始终在寻找机会夺取权力。如果舜表现出任何软弱或犹豫，他的对手可能会立即采取行动，试图取而代之。</p>
<p>此外在古代社会，权力的合法性往往与天命、德行等观念紧密相连。如果舜在关键时刻退让，可能会被视为缺乏领导力或德行不足，从而失去社会的广泛支持和认可。正因为面临如此复杂的局势和巨大的压力，舜只能选择不断前进，最终成为帝舜。这不仅是个人意志的体现，更是政治现实的必然选择。</p>
]]></content>
      <categories>
        <category>史记</category>
      </categories>
      <tags>
        <tag>史记</tag>
        <tag>历史</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记-史记（二）</title>
    <url>/2025/03/05/shiji-2/</url>
    <content><![CDATA[<p>五帝三皇神圣事，骗了无涯过客。</p>
<span id="more"></span>

<p>上一章记录了黄帝、帝颛顼、帝喾和帝尧时期的事迹，这一章从帝舜开始。</p>
<h1 id="帝舜"><a href="#帝舜" class="headerlink" title="帝舜"></a>帝舜</h1><p>根据传说，舜天生异相，生有重瞳，因此被称为“重华”。他是上虞人，也被尊称为虞舜。从家世来看，舜是昌意的七世孙，而昌意是黄帝的儿子，这意味着舜是黄帝的八世孙。帝尧是帝喾的儿子，而帝喾是黄帝另一个儿子玄嚣的孙子，帝尧只是黄帝的三世孙。两人的辈分似乎存在一些矛盾😢😳。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250305234822072.png"></p>
<p>之后介绍舜的家世，舜父是盲人，母亲去世之后舜父又娶了一个，然后生了个儿子叫象，象为人傲慢，但舜父很宠爱，常想杀舜，舜则总是躲着他。如果惩罚不重时，也就委屈地忍受了。他顺从地待候着父亲、后母和弟弟，每天谦恭谨慎，从不怠慢。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250305235735332.png"></p>
<p>舜是冀州人，居蒲阪城（在今山西永济市蒲州镇，古属冀州），曾在历山（又名雷首山，在今山西永济市境内）种田，在雷泽捕鱼，在黄河边上制作陶器，在寿丘（今山东）制造各种生产生活用品，还在负夏（今山东）从事过商业活动。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250306000204693.png"></p>
<p>帝尧为考察舜，将两位女儿嫁给他以观其治家之道，又让九个儿子与他交往以察其处世之能。舜在妫汭的家中严谨持家，两位公主不敢怠慢，恪守妇道；九位王子也受其影响，日渐稳重。</p>
<p>舜的德行感化四方：在历山耕作，化解了地界之争；在雷泽捕鱼，促进了渔民和睦；在河边制陶，提升了陶器质量。他所居之处，一年成村落，两年变市镇，三年化都城。</p>
<p>尧赏识舜的才能，赐予衣物、琴具，并为其修建粮仓、赠送牛羊。然而舜的父亲瞽叟仍存加害之心，两次设计谋害舜，都被舜机智化解（一说这些事为后人杜撰）。面对父亲与弟弟的恶意，舜始终以德报怨，保持孝悌之心。</p>
<p>最终，尧让舜制定五典、教化百姓、管理百官，舜皆出色完成，展现出了非凡的治国才能。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250306000822492.png"><br><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250306000832758.png"></p>
<p>当时有四凶，浑沌（一说是讙兜）、穷奇（一说是共工）、梼杌(táo wù，一说是鲧)、饕餮(tāo tiè，一说是三苗)。舜为广纳贤才，决定敞开国都四门。为此，他将四凶驱逐至远方，令其抵御妖魔。自此，国都四门常开，国内再无作恶之人。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250306001436464.png"></p>
<p>这里有一段注释，“北宋孙明复说尧并不是不能铲除这四凶，只是要把他们留给舜，让舜的功绩显著于天下。这段太史公为突出舜，无形之中降低了尧，孙氏又巧为尧说解，可谓用心良苦”😅。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250306003258778.png"><br><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250306003314734.png"></p>
<p>舜继位之后，任用禹、皋陶（gāo yáo, 舜时掌刑狱的官）、契（舜时掌教化的官，商朝的祖先）、后稷（也称弃，舜时掌管农事的官，周朝的祖先）、伯夷（舜时掌礼的官，周初齐太公之祖先）、夔、龙、倕、益（也称“伯益”、“伯翳”、“大业”，秦国的祖先）、彭祖等人。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250306233023858.png"></p>
<p>下图为五帝的都城（来源：张版），基本都在今山河四省。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250306234422376.png"></p>
<p>这里概述了帝舜的一生，在帝位三十九年，前往南方巡视，最终在苍梧郡的郊野逝世，安葬于长江以南的九疑山，即后来的零陵郡。</p>
<p>舜的儿子商均不成器，舜便提前将禹推荐给上天。十七年后，舜驾崩，三年丧期结束后，禹仿效舜将帝位让给尧的儿子的做法，也将帝位让给舜的儿子，但诸侯们都归心于禹，于是禹最终登基为天子。尧的儿子丹朱和舜的儿子商均都享有封地，以祭祀他们的先祖。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250306234629587.png"></p>
<p>这里说明了五帝都源自同一个姓氏，但是国号不同。帝禹的国号是夏后，后来帝禹又改称为姒氏。契的国号是商，姓子氏。弃的国号是周，姓姬氏（先秦时期姓和氏是不同的，但是在这里太史公混淆了）。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250306235109973.png"></p>
<p>《五帝本纪》最后，太史公写了说明和议论，这里贴上全部译文。</p>
<p>太史公说：有不少学者讲述过五帝之事，但五帝的时代久远，《尚书》也只是记载了尧以后的事情；各家学派讲述黄帝的事情不少，但内容荒诞不经，有身份有头脑的人是不会相信那些话的。孔门教学用过的《宰予问五帝德》和《帝系姓》，不是儒家的经典，不被某些儒者所承认。我曾向西到过空桐山，向北到过涿鹿，向东到过大海边，向南曾渡过淮河长江，在我所到的相关地区，都曾听到过当地长老讲述黄帝或是讲述尧、舜的事情，而这些不同地区的风土人情也的确不同，因此总的感觉还是古文典籍的说法比较接近事实。我读过《春秋》、《国语》，其中对《五帝德》、《帝系姓》中一些说法的阐发是很清楚的，问题只是人们没作深入的研究，其实这两本书所表述的观点还是比较切实可信的。《尚书》有很多散佚，到现在已经相当久远了，其所散佚的内容偶尔还能从其他著作中见到。如果不是好学深思，真正对古代传说有所理解，是很难对那些学识浅陋的人说清楚的。于是我选择较为确实可信的材料，编排阐发，写成了这“本纪”部分的第一篇。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250306235721552.png"><br><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250306235734208.png"></p>
]]></content>
      <categories>
        <category>史记</category>
      </categories>
      <tags>
        <tag>史记</tag>
        <tag>历史</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记-史记（三）</title>
    <url>/2025/03/07/shiji-3/</url>
    <content><![CDATA[<p>大雨落幽燕，白浪滔天，秦皇岛外打渔船。</p>
<!-- 有多少风流人物？盗跖庄蹻流誉后，更陈王奋起挥黄钺。 -->
<span id="more"></span>

<h1 id="夏本纪"><a href="#夏本纪" class="headerlink" title="夏本纪"></a>夏本纪</h1><p>本纪第二为《夏本纪》。“过去人们把夏王朝的历史通通归于“传说”范畴，甚至连大禹有无其人也有人持怀疑态度。近些年来随着商朝考古的巨大进展，尤其是 “夏商周工程”的启动，事实已经证明《殷本纪》所记的商朝世系是符合科学实际的。既然商朝的世系符合实际，那么夏朝的情况又当如何呢？在“夏商周工程”所发表的阶段报告中，已经肯定了《夏本纪》所列的夏朝世系，并将夏王朝存在的年代确定在公元前2070至前1600。—摘自韩版”</p>
<p>禹是黄帝的玄孙，夏是帝禹的国号，禹的父亲是鲧（一说鲧封于崇，称崇伯鲧），鲧的父亲是帝颛顼，禹是帝颛顼的孙子，而上章说到舜是帝颛顼的六世孙，按辈分，禹应为舜的高祖辈😓。</p>
<p>有注释说“他们俩能相见已属难得，且禹的年龄理应远大于舜。然而，当舜命禹治水时，禹才刚娶涂山之女，之后又接受舜的禅让，在位十七年后崩于会稽。由此推断，禹的年龄实则小于舜，这岂合常理！”</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250307001129337.png"></p>
<p>这一段的大部分内容都在五帝本纪里提到过。舜在巡视过程中发现鲧治理洪水没有功绩，就在羽山将鲧处死。天下人都认为舜惩罚鲧是正确的。于是舜推举鲧的儿子禹，命他继续鲧的事业。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250307002224853.png"></p>
<p>舜命禹为司空，治理水土。禹于是就与益、后稷尊奉帝舜的命令，确定高山大川的治理规划。禹在外面治水十三年，经过家门都不敢进去。禹准绳规矩不离手，不违背四时节气，开划九州土地，疏通九条水道，修筑九处湖泽堤障，测量九大山系。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250307002803755.png"></p>
<p>下图为禹贡所划分的九州（来源：张版）。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250307003522999.png"></p>
<p>禹继承舜，面南而坐，接受天下臣民的朝拜，国号定为夏后，姓氏为姒。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250307003906352.png"></p>
<p>帝禹继位后，便推举皋陶为继承人，然而皋陶未及登基便不幸辞世。继而，帝禹又举荐了益，委以他管理政务的重任。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250307231558784.png"></p>
<p>帝禹在位第十年东巡，逝于会稽。临终前传位给益，但益谦让，隐居箕山南麓。禹之子启贤明，深得民心。禹虽传位益，因益辅政时日尚短，未获天下信任。诸侯纷纷转向启，称：“此乃吾君禹帝之子也。”启遂继位，是为夏后帝启。启为禹与涂山氏之女所生。</p>
<p>注释一说“尧、舜、禹之禅让，出于儒家的艳谈，古本《竹书纪年》则曰“益干启位，启杀之”，无彼此揖让之事”。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250307231835485.png"></p>
<p>有扈氏就不服了，一说“扈为夏同姓之国。有扈见尧、舜受禅，启独继父，故不服”。又有一说“有扈为启之兄弟”，“有扈，启之庶兄，以尧、舜举贤，禹独与子，故伐启”。</p>
<p>启与有扈氏大战于甘（今洛阳市西南），启作了一篇誓词《甘誓》，召来六军的将领申明这一誓词。然后灭了有扈氏，天下咸朝。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250307232531057.png"></p>
<p>夏后帝启驾崩，儿子太康继位，太康因为耽于游乐而失去国位（一说为被有扈氏之后“羿”所灭）。太康之后弟弟中康继位。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250307233434587.png"></p>
<p>随后简要记载了夏朝的帝王世系。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250307234037522.png"></p>
<p>至夏桀（履癸）时，自孔甲以来诸侯多已叛离。桀不思修德振国，反以武力压迫百官，致朝野怨声载道。桀曾囚（商）汤于夏台（今河南禹州），后将其释放。汤修德政，诸侯归心，遂起兵伐桀。桀败走鸣条（一说在今河南封丘东，也有一说在今山西运城安邑镇北），终死于逃亡途中。临终悔道：”早知今日，当在夏台诛汤。”汤继位，建立商朝，分封夏后裔，到周朝时夏后裔被封在杞国（今河南杞县）。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250307234241378.png"><br><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250307234258135.png"></p>
<p>《夏本纪》最后，太史公也写了说明和议论，这里贴上全部译文。</p>
<p>太史公说：禹姓姒，他的后代分封，就以所分封的国为姓，所以有夏后氏、有扈氏、有男氏、斟寻氏、彤城氏、褒氏、费氏、杞氏、缯氏、辛氏、冥氏、斟戈氏等不同的姓氏。孔子校正夏代的历法，所以学者中有很多人传授《夏小正》。从虞、夏时期开始，贡纳赋税的制度就已经很完备了。<br>有人说禹在江南召集诸侯，考核诸侯功绩时去世，因此就安葬在那里，将该地命名为会稽。会稽，意即会计，就是会集诸候核计其功绩的意思。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250307234749733.png"></p>
]]></content>
      <categories>
        <category>史记</category>
      </categories>
      <tags>
        <tag>史记</tag>
        <tag>历史</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记-史记（四）</title>
    <url>/2025/03/13/shiji-4/</url>
    <content><![CDATA[<p>一片汪洋都不见，知向谁边？</p>
<span id="more"></span>

<h1 id="殷本纪"><a href="#殷本纪" class="headerlink" title="殷本纪"></a>殷本纪</h1><p>本纪第三为《殷本纪》。2000年发表的《夏商周年表》与《殷本纪》所谱列的顺序相同，商朝的统治年限为前1600一前1046，共历时554年。</p>
<p>商朝的始祖是殷契（xiè, “契始封商，其后裔盘庚迁殷，殷在邺南，遂为天下号。契是殷家始祖，故言‘殷契’。殷，地名，即今所谓“殷墟”，在今河南安阳西北小屯村一带。”），母亲是简狄，为帝喾次妃。天命玄鸟（燕子），降而生商。契长大后，辅佐大禹治水（据《夏本纪》，和禹一同治水的是“益”与“后稷”）。在帝舜时期担任司徒（古代三公之一，主管民政）。契被封在商地，赐姓子氏。契所在的氏族在尧、舜、禹期间发展起来。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250313004842124.png"></p>
<p>从契至汤（成汤，又名天乙）历经十四代，并经过八次迁都。汤建都在毫邑（今河南省商丘附近）。成汤说：“我说过，人从水中可以照见自己的容貌，从众人的反应中可以得知政治是否清明。”</p>
<p>伊尹说：“这话说得很好，能听取百官的意见，帝王的管理水平才能提高。要治好国家，管好黎民，就得让能办事的人都各在其位。努力呀，努力呀！”</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250313010004269.png"><br><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250313010510596.png"></p>
<p>伊尹又称阿衡（一说是官名），早年微贱，他想见成汤却找不到机缘，于是就做了有莘氏的陪嫁奴仆，背着烹调用具，用做莱的道理比喻治国之道以说服成汤，协助成汤实现了王道的政治。汤破格重用伊尹，委伊尹以国政。伊尹曾一度离开商汤去了夏都，但他不满意夏桀的腐败，又回到商的国都。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250313235820134.png"></p>
<p>成汤的小故事一则。说有一天，成汤外出打猎，看到猎人围绕着猎场四周布网，猎人祈祷说：“愿天下四方的鸟兽都落入我的网中。”成汤说：“唉，这不是要把它们一网打尽了吗？”于是他下令撤去三面的网，并将祷告词改为：“想从左边走的，往左；想从右边走的，往右；不听从指挥的，才落入我的罗网。”诸侯们得知后，说：“成汤的仁德真是无以复加了，连禽兽都能蒙受他的恩泽。”</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250314000523422.png"></p>
<p>夏桀施行暴政，荒淫无道，诸侯中的昆吾氏（一说在今河南许昌东）也为非作歹。成汤于是率诸侯讨伐昆吾氏，伊尹随汤出征。成汤击败昆吾氏后，乘胜讨伐夏桀，并作了《汤誓》通告全军。</p>
<p>人们非常恨夏桀，夏桀自比<strong>太阳</strong>，所以人们说：“<strong>时日曷（hé）丧，予与汝皆亡</strong>”。这句话的意思是“你这太阳何时消亡，我情愿与你同归于尽”。</p>
<p>成汤说“我很勇武”，于是自己号称为武王。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250314000701170.png"></p>
<p>夏桀被打败，逃到了鸣条（今河南封丘东），夏朝的军队被彻底消灭，夏朝从此灭亡。</p>
<p>成汤战胜夏桀后，想改换夏朝所祭祀的土神（一说为共工之子句龙，治水有功），但是改换不了，因而作了《夏社》。</p>
<p>伊尹向各地诸侯发出通告，各地诸侯都表示归附商朝，于是成汤践天子位，平定海内。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250314005455508.png"></p>
<p>成汤灭了夏朝后，回到毫都，遂作《汤诰》以告谕天下。让各地诸侯与各国君主必须多给黎民百姓作贡献，勤勤恳恳地做好自己的工作，并从禹、皋陶、后稷与蚩尤的正反两面中吸取救训。</p>
<p>成汤实行新历法，改正朔即改用新历法。正朔是一年中第一个月的第一天。夏朝是以阴历正月（建寅月）为岁首，商朝是以阴历十二月（建丑月） 为岁首，周朝是以阴历十一月（建子月）为岁首，秦朝是以阴历十月（建亥月）为岁首。</p>
<p>又变换服饰，崇尚白色。夏尚黑，商尚白，周尚赤。群臣朝见帝王商议国事也定在白天。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250314010310290.png"><br><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250314010324586.png"></p>
<p>成汤去世后，汤的儿子太丁、外丙、中壬继位。之后伊尹让太丁之子成汤的嫡长孙太甲继位。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250314011044844.png"></p>
<p>帝太甲在位三年，昏庸暴虐，不遵守成汤定下的制度，德行丑恶，伊尹便把他放逐到桐宫（一说在今河南偃师附近）。</p>
<p>这期间，伊尹摄政代替太甲治理国事，接受诸侯的朝见。太甲在桐宫住了三年，他悔过自省，改恶从善，伊尹便将他接了回来，把政权交还给他。</p>
<p>太甲经过修炼提高了道德，诸侯对他表示归附，百姓的生活也都很安宁。</p>
<p>为嘉奖太甲的错而能改，伊尹作了《太甲训》两篇，并且褒扬太甲，称他为“太宗”。古代开国帝王之庙号可称为“高祖”或“太 祖”，其继世帝王有圣德著于世者可称为“太宗”。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250314011356155.png"></p>
<p>沃丁为帝时，伊尹去世，葬在了毫都。到帝雍己时，商朝的国力渐弱，有的诸侯已经不来朝拜。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250314011743427.png"></p>
<p>到帝太戊时，任用贤臣伊陟为相。一说伊陟为伊尹之子，一说汤到太戊有七世，而伊尹的儿子伊陟才担任相，他们的寿命差距如此悬殊。</p>
<p>伊陟劝太戊修德，并重用贤臣。殷朝重新兴旺，诸侯都来归顺，为此，称太戊为“中宗”。使国家中兴之君，庙号可称“中宗”。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250314012054782.png"></p>
<p>盘庚即位之前，殷朝建都在黄河以北。盘庚即位后率众迁到了黄河以南，重又回到了成汤时的故都毫邑（今河南偃师商城或郑州商城）。《竹书纪年》说盘庚是由黄河东南的奄（今山东曲阜）迁往黄河以北的殷墟（今河南安阳西北小屯村）。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250315005316536.png"></p>
<p>武丁继位三年之内不动声色，把政务交给太宰。武丁夜里梦见一位名叫“说”的能人，然后在傅险（今山西平陆东）这个地方找到了。当时那个叫“说”的人是个苦役犯，正在傅险修路。武丁破格任用他为宰相，殷朝被他治理得很有起色。于是武丁就将傅险作为他的姓氏，称他为傅说（傅说举于版筑之间）。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250315005809382.png"></p>
<p>帝武乙做了个木偶，说它是天神，武乙要和这个“天神”较量，他让人替“天神”投掷，“天神”输了，于是武乙就侮辱 他。武乙用皮革做了一条口袋，里面装满了血，他把这个口袋挂得高高的，从下面往上射，说这是“射天”。</p>
<p>武乙到黄河与渭水汇合的地方打猎，遇着打雷，被击死了。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250315010658195.png"></p>
<p>帝乙的长子是微子启。小儿子叫辛，辛的母亲是王后，所以帝乙死后，其子辛继位，这就是帝辛（又称受），天下称之为纣。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250315010924551.png"></p>
<p>帝纣天资聪敏，反应快，力气超常，能空手与猛兽格斗😢。</p>
<p>知（智）足以距（拒）谏，言足以饰非。即帝纣的才智足以使他挡回任何劝谏，他的能言善辩足以帮他文过饰非。</p>
<p>帝纣喜欢在群臣面前夸示自己的才干，希望让自己的名声高过普天下的任何人，他认为天底下没有一个人能与他相比。</p>
<p>帝纣喜欢饮酒作乐，贪恋女色。他宠爱妲己（有苏氏），唯妲己之言是听。他让乐工师涓谱制淫荡的曲子，他用北方的淫靡之舞配合这种靡靡之乐。</p>
<p>帝纣横征暴敛以填满鹿台（今河南淇县）的线库和巨桥的粮仑。他扩建沙丘（今河北平乡东北，战国时属赵，赵武灵王饿死于此，后秦始皇东巡又死于此）的亭台园圃，搜罗各种珍禽异兽置于其中。</p>
<p>帝纣从来不敬神。他把许多乐工戏子叫到沙丘来，他用酒灌成池沼，把肉悬挂成林，让男男女女光着身子在里面追逐嬉戏，彻夜不息（酒池肉林）。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250315011140481.png"></p>
]]></content>
      <categories>
        <category>史记</category>
      </categories>
      <tags>
        <tag>史记</tag>
        <tag>历史</tag>
      </tags>
  </entry>
  <entry>
    <title>VectorCDC论文浅读</title>
    <url>/2025/02/23/vectorcdc/</url>
    <content><![CDATA[<p>……</p>
<span id="more"></span>

<p>VectorCDC<a href="#VectorCDC">[1]</a>是存储顶会FAST25的论文，主要改进和优化了重复数据删除中的hashless Content-Defined Chunking（CDC）算法。因为我最近在做一些CDC相关的研究和工作，所以对这篇论文很感兴趣。这里记录一下我对这篇论文的理解、总结和思考。因本人水平有限，如有错误，欢迎指正。</p>
<h1 id="背景和相关知识"><a href="#背景和相关知识" class="headerlink" title="背景和相关知识"></a>背景和相关知识</h1><h2 id="数据重删阶段"><a href="#数据重删阶段" class="headerlink" title="数据重删阶段"></a>数据重删阶段</h2><p>数据重删（Data deduplication）一般来讲分为以下几个阶段：</p>
<ol>
<li>Data Chunking，数据分块，将数据分割成固定大小的块，范围一般在1-64KB之间。</li>
<li>Chunk Hashing and Comparison，分割完数据后，对每个块进行hash计算，然后比较hash值，找出重复块。这里的hash值一般使用SHA或者MD5等hash（collision-resistant）算法计算。</li>
<li>Metadata Creation，对于重复的块，只保留一个副本，其他的块只保留元数据信息（recipe），指向重复块的位置。</li>
<li>Metadata and Chunk Storage，将元数据和块存储到存储介质中。</li>
</ol>
<p>这四个阶段是VectorCDC文章中提到的，其他文章中对这些阶段的提法也都大差不差。数据重删最重要的是重删率，VectorCDC中用space savings来衡量重删率，space savings定义为：<br><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250226145657299.png" alt="space_savings"></p>
<p>即重删之前的数据大小和重删之后的数据大小的比值。重删率越高，space savings越大。</p>
<h2 id="数据分块"><a href="#数据分块" class="headerlink" title="数据分块"></a>数据分块</h2><p>数据分块是重删过程中计算开销最大（most compute-intensive phases）的一个阶段。一般来讲目前的重删系统都使用变长分块算法即CDC算法，固定分块（Fixed-size chunking）算法不怎么用，因为它不能抵抗boundary shift，即数据的插入、删除、更新等操作会导致数据的分块发生变化，从而影响重删率。而CDC算法可以根据数据的内容来分块，因此更加灵活。</p>
<p>CDC算法又分为hash-based CDC和hashless CDC两种，hash-based算法就是对数据流逐字节滑动一个固定大小的窗口，然后计算窗口内的数据的hash值，如果hash值和一个预先定义的值匹配（target mask），那就插入一个chunk boundary。这里的hash算法使用的是rolling hash算法，比如较著名的Rabin fingerprint算法和Gear算法<a href="#Ddelta">[2]</a>，如下图。<br><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250226150518378.png" alt="Rabin and Gear"></p>
<p>hashless CDC算法则是不使用hash算法，而是利用局部极小值/极大值来插入分块边界，这样可以减少hash计算的开销，但可能会导致更低的重删率。VectorCDC就是一种hashless CDC算法。</p>
<h2 id="使用AVX优化CDC算法"><a href="#使用AVX优化CDC算法" class="headerlink" title="使用AVX优化CDC算法"></a>使用AVX优化CDC算法</h2><p>SS-CDC<a href="#SS-CDC">[3]</a>使用AVX-512 instructions优化hash-based CDC算法，简单来说是把chunking阶段再分为rolling hash和boundary detection两个阶段，rolling hash阶段只用来找potential boundary candidates，但是可以并行；然后boundary detection阶段再连续地对candidates进行过滤，找到real boundaries。两个阶段都可以使用AVX-512 instructions来加速。</p>
<p>但是一些基于hash-based CDC算法的优化例如minimum chunk-size skipping就不能在SS-CDC中使用。Minimum chunk-size skipping是指每次找到一个chunk boundary后，就跳过一部分字节，然后继续找下一个chunk boundary，这样可以减少hash计算的开销。SS-CDC不能用这个优化的原因是因为SS-CDC的rolling hash阶段只是用来找potential boundary candidates，而不是real boundaries，所以不能直接跳过这部分字节。但是SS-CDC的第二个阶段可以跳过在这些字节范围内的potential boundary candidates。</p>
<p>另外，SS-CDC使用大量的AVX scatter/gather instructions，这些指令在处理不规则的内存访问时会有很大的性能开销，所以SS-CDC的性能并不是很好。从下面的吞吐量测试图中可以看到用SS-CDC的吞吐量并没有提高太多，这里面CRC的rolling过程和Rabin类似。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250226152928584.png" alt="SS-CDC speedups"></p>
<p>经过一番分析，VectorCDC决定使用AVX instructions来优化hashless CDC算法。</p>
<p><strong>个人思考</strong>：VectorCDC对SS-CDC的分析很准确。此外，SS-CDC在它的两个阶段中使用BitArray来记录potential boundary candidates。然而，对于较大数据集，BitArray会带来显著的内存开销，且第二阶段还需连续扫描BitArray，这可能会导致性能下降。</p>
<h1 id="VectorCDC算法"><a href="#VectorCDC算法" class="headerlink" title="VectorCDC算法"></a>VectorCDC算法</h1><p>Hashless CDC算法也要滑动一个窗口，然后根据这个窗口的位置找局部极小值/极大值来插入分块边界。VectorCDC的主要改进是使用AVX instructions来加速这个过程。</p>
<p>下图是Asymmetric Extremum (AE)<a href="#AE">[4]</a>算法的示例，简单来说是逐字节滑动一个固定大小的窗口，如果这个窗口前一个字节（位置为P）的值大于区间<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="21.677ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 9581.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(892,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1343,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1809,0)"><path data-c="5F" d="M0 -62V-25H499V-62H0Z"></path></g><g data-mml-node="mi" transform="translate(2309,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(2738,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(3223,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3795,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4395,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(4915,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(5444,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5895,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6385,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(6829.7,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(7802.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(8803.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(9303.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container>内所有字节的值，且不小于窗口内所有字节的值，那么就说P是一个极大值，反之亦然。这样就可以找到极大值或极小值，然后在窗口的最后一个字节处插入分块边界。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250226154338191.png" alt="AE"></p>
<p>Rapid Asymmetric Maximum Algorithm (RAM)<a href="#RAM">[5]</a>的判定标准又和AE不同。下图是RAM算法的示例，RAM先在<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="17.463ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 7718.4 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(954,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1420,0)"><path data-c="5F" d="M0 -62V-25H499V-62H0Z"></path></g><g data-mml-node="mi" transform="translate(1920,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(2349,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(2834,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3406,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4006,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(4526,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(5055,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5506,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6218.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(7218.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>的位置上固定一个窗口，将这个窗口内的最大值扫描出来。然后从这个窗口下一个字节开始，找到一个大于窗口内最大值的字节，并在这个字节的位置插入分块边界。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250226161310535.png" alt="RAM"></p>
<p>VectorCDC将hashless算法的过程分为两个阶段Extreme Byte Search（EBS）和Range Scan（RS），并对每一个阶段使用AVX instructions来加速。</p>
<h2 id="Extreme-Byte-Search"><a href="#Extreme-Byte-Search" class="headerlink" title="Extreme Byte Search"></a>Extreme Byte Search</h2><p>对于EBS阶段，VectorCDC设计了Tree-based Search方法来找到窗口内的最大值。如下图所示，第一步将所有字节打包（packed）加载入AVX-compatible m512i variables中，一个m512i variable可以载入连续的64个字节。</p>
<p>第二步使用vector mm512_max instructions找到两个m512i variables之间的最大值，然后将这些最大值再载入一个m512i variable中。之后重复这个过程，直到到达这个搜索树的根节点，再对这个根节点的m512i variable进行扫描，找到拥有最大值的字节。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250226163518851.png" alt="Accelerating Extreme Byte Search"></p>
<h2 id="Range-Scan"><a href="#Range-Scan" class="headerlink" title="Range Scan"></a>Range Scan</h2><p>对于RS阶段，VectorCDC设计了Packed Scanning方法。如下图所示，将最大值载入一个m512i variable中，然后将要扫描区域的64个连续字节打包载入一个m512i variable中，然后使用mm512_cmpge instructions来比较这两个m512i variables，生成一个64-bit mask。</p>
<p>如果mask为0，说明这64个字节中没有大于最大值的字节，需要继续扫描下一个64个字节；如果mask不为0，说明这64个字节中有大于最大值的字节，那么就在这64个字节中找，然后插入分块边界。这个过程不影响minimum chunk-size skipping优化。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250226165749382.png" alt="Packed Scanning"></p>
<h2 id="对AE和RAM优化"><a href="#对AE和RAM优化" class="headerlink" title="对AE和RAM优化"></a>对AE和RAM优化</h2><p>对RAM的优化很简单，VectorCDC的EBS代替RAM在固定窗口中找最大值的过程，RS代替RAM在窗口外找大于最大值的字节的过程。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250226171041345.png" alt="RAM优化"></p>
<p>对AE的优化稍显复杂，因为它的固定窗口在找chunk boundary的过程中会不断地滑动，所以VectorCDC的RS阶段要不停地进行以更新最大值，而且每一个RS阶段之后都要进行一次EBS阶段。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250226171116197.png" alt="AE优化"></p>
<p><strong>个人思考</strong>：VectorCDC的优化思路简洁而高效，真正做到了“simple but effective”。其设计在整体上展现了清晰的逻辑和实用性。</p>
<p>此外，唯一的问题是对AE的优化显得不够直接。在仅阅读论文、尚未深入研究VectorCDC源码的情况下，我发现AE需要进行多轮RS和EBS，这无疑会引入额外的开销。这一点在后续的测试结果中也有所体现，对AE的优化效果并不理想。</p>
<p>原始的AE需要两个变量分别记录固定窗口内和窗口之前的极值，在滑动窗口时只需将新字节与这两个变量进行比较即可完成更新。基于此，我认为AE仍然存在一定的优化空间。或许由于篇幅限制，VectorCDC未能详细展开对AE优化过程的讨论，但这部分确实值得进一步探索和改进。</p>
<h1 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h1><p>实验结果主要是对VectorCDC和其他CDC算法的重删率和吞吐量进行对比。下图是重删率的比较，可以看到hashless CDC算法（AE和RAM）的重删率在四个数据集下都比hash-based CDC算法低，即space savings更低。此外使用vector指令之后不影响重删率。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250226172826977.png" alt="space savings"></p>
<p>然后下图是吞吐量的比较，使用VectorCDC优化的VRAM吞吐量要高得多，提升很大。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250226173909855.png" alt="Throughput1"></p>
<p>下图是分别使用AVX-256和SSE-128 instructions的吞吐量对比，可以看到使用AVX-256 instructions的吞吐量更高，同时使用VectorCDC优化的AE吞吐量并不是很高，其中原因已在前文提到。</p>
<p><img data-src="https://zzh-blog-data.oss-cn-hangzhou.aliyuncs.com/img/20250226174043648.png" alt="Throughput2"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>VectorCDC利用Vector指令加速hashless CDC算法，主要优化了Extreme Byte Search和Range Scan阶段。VectorCDC的优化思路很清晰，实验结果也很好。这是VectorCDC的开源仓库：<a href="https://github.com/UWASL/dedup-bench">VectorCDC</a>。</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a name="VectorCDC"></a><br>[1] <a href="https://www.usenix.org/conference/fast25/presentation/udayashankar">VectorCDC: A Vectorized Content-Defined Chunking Algorithm for Data Deduplication</a>.<br><a name="Ddelta"></a><br>[2] <a href="https://www.sciencedirect.com/science/article/pii/S0166531614000790">Ddelta: A deduplication-inspired fast delta compression approach</a>.<br><a name="SS-CDC"></a><br>[3] <a href="https://dl.acm.org/doi/10.1145/3319647.3325834">SS-CDC: a two-stage parallel content-defined chunking for deduplicating backup storage</a>.<br><a name="AE"></a><br>[4] <a href="https://dl.acm.org/doi/10.1109/TC.2016.2595565">A Fast Asymmetric Extremum Content Defined Chunking Algorithm for Data Deduplication in Backup Storage Systems</a>.<br><a name="RAM"></a><br>[5] <a href="https://dl.acm.org/doi/10.1016/j.future.2017.02.013">A new content-defined chunking algorithm for data deduplication in cloud storage</a>.</p>
]]></content>
      <categories>
        <category>Paper</category>
      </categories>
      <tags>
        <tag>Paper</tag>
        <tag>Deduplication</tag>
      </tags>
  </entry>
</search>
